name: Generate Documentation PDFs

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'ARQUITECTURA.md'
      - 'DATABASE-DOMAINS-STRUCTURE.md'
      - 'DIAGRAMAS-SIMPLIFICADOS.md'
      - 'exports/schema.sql'
      - '.github/workflows/generate-pdfs.yml'
  workflow_dispatch: # Permite ejecutar manualmente el workflow

permissions:
  contents: write

jobs:
  generate-pdfs:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install system dependencies for Chromium
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            chromium-browser \
            libnss3 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libpango-1.0-0 \
            libcairo2 \
            libasound2t64

      - name: Install dependencies locally
        run: |
          npm init -y
          npm install marked puppeteer

      - name: Create exports directory
        run: mkdir -p exports

      - name: Create PDF generator script with Mermaid support
        run: |
          cat > generate-pdf.js << 'ENDOFFILE'
          const fs = require('fs');
          const { marked } = require('marked');
          const puppeteer = require('puppeteer');

          async function generatePDF(mdFile, pdfFile) {
            console.log(`Converting ${mdFile} to ${pdfFile}...`);

            const markdown = fs.readFileSync(mdFile, 'utf8');
            const html = marked.parse(markdown);

            const fullHtml = `
              <!DOCTYPE html>
              <html>
              <head>
                <meta charset="UTF-8">
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.5.1/github-markdown.min.css">
                <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
                <style>
                  body {
                    box-sizing: border-box;
                    min-width: 200px;
                    max-width: 980px;
                    margin: 0 auto;
                    padding: 45px;
                  }
                  .markdown-body {
                    font-size: 14px;
                    line-height: 1.6;
                  }
                  @media print {
                    body { padding: 20mm; }
                  }
                </style>
              </head>
              <body class="markdown-body">
                ${html}
                <script>
                  mermaid.initialize({
                    startOnLoad: true,
                    theme: 'default',
                    securityLevel: 'loose'
                  });
                </script>
              </body>
              </html>
            `;

            const browser = await puppeteer.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu'
              ]
            });

            const page = await browser.newPage();
            await page.setContent(fullHtml, { waitUntil: 'networkidle0' });

            // Wait for Mermaid to render
            await page.waitForTimeout(3000);

            await page.pdf({
              path: pdfFile,
              format: 'A4',
              margin: { top: '20mm', right: '20mm', bottom: '20mm', left: '20mm' },
              printBackground: true
            });

            await browser.close();
            console.log(`✓ ${pdfFile} generated successfully`);
          }

          const args = process.argv.slice(2);
          if (args.length !== 2) {
            console.error('Usage: node generate-pdf.js <input.md> <output.pdf>');
            process.exit(1);
          }

          generatePDF(args[0], args[1]).catch(err => {
            console.error('Error:', err);
            process.exit(1);
          });
          ENDOFFILE

      - name: Generate PDFs with Mermaid support
        run: |
          echo "Generating ARQUITECTURA.pdf..."
          node generate-pdf.js ARQUITECTURA.md exports/ARQUITECTURA.pdf
          echo "✓ ARQUITECTURA.pdf created: $(ls -lh exports/ARQUITECTURA.pdf)"

          echo "Generating DATABASE-DOMAINS-STRUCTURE.pdf..."
          node generate-pdf.js DATABASE-DOMAINS-STRUCTURE.md exports/DATABASE-DOMAINS-STRUCTURE.pdf
          echo "✓ DATABASE-DOMAINS-STRUCTURE.pdf created: $(ls -lh exports/DATABASE-DOMAINS-STRUCTURE.pdf)"

          echo "Generating DIAGRAMAS-SIMPLIFICADOS.pdf..."
          node generate-pdf.js DIAGRAMAS-SIMPLIFICADOS.md exports/DIAGRAMAS-SIMPLIFICADOS.pdf
          echo "✓ DIAGRAMAS-SIMPLIFICADOS.pdf created: $(ls -lh exports/DIAGRAMAS-SIMPLIFICADOS.pdf)"

          echo ""
          echo "All PDFs in exports/:"
          ls -lh exports/
        continue-on-error: false

      - name: Commit and push PDFs
        run: |
          echo "Git status before adding:"
          git status

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          echo ""
          echo "Adding PDFs to git..."
          git add exports/*.pdf

          echo ""
          echo "Git status after adding:"
          git status

          echo ""
          echo "Staged changes:"
          git diff --staged --name-only

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo ""
            echo "ℹ️ No changes to commit (PDFs are identical to existing ones)"
          else
            echo ""
            echo "Committing changes..."
            git commit -m "docs: update generated PDFs [skip ci]"

            echo ""
            echo "Pushing to remote..."
            git push

            echo ""
            echo "✓ PDFs committed and pushed successfully"
          fi

      - name: Summary
        run: |
          echo "## PDF Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully generated PDFs:" >> $GITHUB_STEP_SUMMARY
          echo "- ARQUITECTURA.pdf" >> $GITHUB_STEP_SUMMARY
          echo "- DATABASE-DOMAINS-STRUCTURE.pdf" >> $GITHUB_STEP_SUMMARY
          echo "- DIAGRAMAS-SIMPLIFICADOS.pdf" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f exports/ARQUITECTURA.pdf ]; then
            echo "📄 ARQUITECTURA.pdf size: $(du -h exports/ARQUITECTURA.pdf | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f exports/DATABASE-DOMAINS-STRUCTURE.pdf ]; then
            echo "📄 DATABASE-DOMAINS-STRUCTURE.pdf size: $(du -h exports/DATABASE-DOMAINS-STRUCTURE.pdf | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f exports/DIAGRAMAS-SIMPLIFICADOS.pdf ]; then
            echo "📄 DIAGRAMAS-SIMPLIFICADOS.pdf size: $(du -h exports/DIAGRAMAS-SIMPLIFICADOS.pdf | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
